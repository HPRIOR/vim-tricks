//Sed
// using item groups to swap any occurrence before and after colon
:%s/\(.*\):\(.*\)/\2:\1/g

// substitute capture groups

:%s/\(\w\) dogs/something or\1/g        // (\w captures word in group)
                                        // replaces \1 in sentence

// wrapping all occurrences of a word
:s/vim/<&>/g    // <vim>

// case-sensitive  replace
:s/[Vv]im/him/g

// replace in the following lines
:s/vim/him/10

/----------------------------------------------------------------------------------------------------------------------/
// Movement
I           // insert into line start
A           // insert into line end
a           // insert after cursor
i           // insert before cursor
e           // end of word
b           // start of word
ea          // insert into end of word
bi          // insert into start of word
+           // drop to next line

/----------------------------------------------------------------------------------------------------------------------/
// Searching

t<char>     // jump just before char
T<char>     // jump back just before char
f<char>     // jump to char
F<char>     // jump back to char
*           // search for current cursor under

/<word>     // search forward for word
?<word>     // shearch back for word

// with search term in reg
dgn         //delete
cgn         //change
// can be repeated for next occurrence with .

/----------------------------------------------------------------------------------------------------------------------/
// Surround extension

// wrap text in visual mode with character
viw     // highlight word
S<char> // surround with char

// replace wrapping with another char
cs<original-char><new-char>

/----------------------------------------------------------------------------------------------------------------------/
// Visual-black
<C-v>   // start visual block
I       // insert into visual

/----------------------------------------------------------------------------------------------------------------------/
// Markers
m<char>     // save marker at specific point
'<char>     // go back to saved marker
``          // go back to original position

/----------------------------------------------------------------------------------------------------------------------/
// Sort
// in visual mode
:sort
:sort! // reverse
:sort i // ignore case
:sort n // depending on first decimal on the line


/----------------------------------------------------------------------------------------------------------------------/
// Editing
r<char>     // replace
~           // swap case

// movement editing combinations (i = in, a=all)
ciw         // insert into word
diw or dw   // delete word
dib         // delete in brackets
diB         // delete in curly brackets
dab         // delete block including brackets
daB         // delete block including curly brackets

<C-a> increase number
<C-x> decrease number

/----------------------------------------------------------------------------------------------------------------------/
// Recording
// bind recording to char
q<char>

// replay recording
@<char>

/----------------------------------------------------------------------------------------------------------------------/
Registers
"<char> // specify a register

"<char>yy // yank to specific register

"<char>p // paste from specific register

/----------------------------------------------------------------------------------------------------------------------/
// Custom bindings (ideavim)

// show
<leader>d   // error description

// goto
<leader>x   // next error
<leader>X   // prev error
<leader>g   // declaration
<leader>u   // usages
<leader>c   // class

// split
<leader>wv  // vertically
<leader>ws  // horizontally
<leader>wc  // unsplit
<leader>wC  // unsplit all

// nav-split
<leader>l   // right split
<leader>h   // left split
<leader>j   // down split
<leader>k   // up split
<leader>wo  // next split
<leader>wp  // prev split

// tabs
]]          // right
[[          // left



